---
alwaysApply: true
---

# � LINKART — APP FLOW DOCUMENT

## � 1. APP OVERVIEW

**Nom :** Linkart
**Type :** Marketplace mobile pour la musique
**Objectif :** Permettre aux créateurs (beatmakers, ingénieurs sons, studios, artistes) de vendre et d’acheter des beats, kits et services via une app simple, sécurisée et monétisable.
**Business model :**

* Commission : **5 %** par transaction (beats/kits uniquement).
* Services : **Gratuits** (pas de commission).
* Boosts payants (produits et profils).

---

## � 2. CORE PRINCIPLES

* Un seul type d’utilisateur avec **capabilities dynamiques** (`can_sell`, `can_buy`, `can_offer_services`, etc.).
* Mobile-first (React Native + Supabase + R2).
* Tous les fichiers stockés sur **Cloudflare R2** (presigned URLs only).
* Chaque transaction = contrat PDF + téléchargement limité (beats/kits).
* Services = réservation gratuite + paiement externe.
* Aucune vente hors plateforme n'est encouragée (protection vendeur/acheteur).
* Messagerie conditionnelle : chat uniquement pour services.
* **Système de favoris** : HeartIcon sur Product Cards et Mini Player.
* **Playlists éditoriales** : Créées par admin, lecture par users.
* MVP = simplicité + fiabilité.

---

## � 3. USER LIFECYCLE FLOW

### � 3.1 ONBOARDING

1. **Splash Screen** → logo + tagline.
2. **Sign In / Sign Up**

   * Auth via téléphone (OTP Supabase).
   * Si nouveau user → création profil minimal (`name`, `bio`, `location`).
3. **Capabilities par défaut** :

   ```json
   {
     "can_buy": true,
     "can_sell": false,
     "can_offer_services": false,
     "can_withdraw": false
   }
   ```
4. Redirection vers **Home (Marketplace)**.

---

### � 3.2 HOME / MARKETPLACE

* Liste paginée de produits actifs (beats, kits, services).
* Filtres : genre, prix, licence, type.
* Barre de recherche (par nom ou tag).
* **Produits boostés** affichés en priorité.
* Chaque carte contient :

  * Image ou waveform
  * Nom, prix, licence
  * Preview (30 s max)
  * Bouton "Acheter" (beats/kits) ou "Réserver" (services)
  * Bouton "Voir profil"

---

### � 3.3 PRODUCT DETAIL

* Page dédiée avec :

  * Player (preview)
  * Infos (BPM, genre, type, licence, prix)
  * Profil vendeur
  * Avis / évaluations
  * Bouton "Acheter maintenant" (beats/kits) ou "Réserver" (services)
* Si `user.can_buy === false` → afficher “Vous devez activer votre compte pour acheter”.

---

### � 3.4 CHECKOUT FLOW (Beats & Kits uniquement)

1. **Choix paiement** : Wave ou Orange Money.
2. **Résumé commande** : titre, prix, commission affichée, total.
3. **Paiement** :

   * App → `/api/pay`
   * Backend → crée `transaction` (status = `pending`)
   * Après validation mobile money :

     * `status = paid`
     * Calcul commission 5 %
     * Génération PDF contrat
     * Génération presigned URL pour download
     * Ajout du montant net au `wallet` vendeur
4. **Écran de confirmation** :

   * Message : "Merci ! Votre achat est confirmé."
   * Bouton "Télécharger"
   * Affichage contrat PDF (licence)

---

### � 3.4bis SERVICE BOOKING FLOW (Services uniquement)

1. **Sélection service** : choix du prestataire et du type de service.
2. **Consultation tarifs** : prix fixe, à la demande, ou multi-tarifs.
3. **Demande de réservation** :

   * App → `/api/bookings/create`
   * Backend → crée `booking` (status = `pending`)
   * Notification au prestataire
4. **Confirmation prestataire** :

   * Prestataire confirme ou refuse
   * Si confirmé → `status = confirmed`
   * Activation du chat 1-to-1
5. **Coordination** :

   * Chat intégré pour détails
   * Échange coordonnées si nécessaire
   * Négociation prix (si "à la demande")
6. **Prestation & Paiement** :

   * Service effectué hors plateforme
   * Paiement direct (cash, Wave, OM)
   * Prestataire marque `status = completed`
7. **Évaluation** :

   * Client peut laisser avis et note
   * Améliore réputation prestataire

---

### � 3.5 CONTRACT GENERATION (Beats & Kits uniquement)

Dès `status = paid` :

* Backend génère contrat PDF contenant :

  * ID transaction
  * Nom vendeur / acheteur
  * Nom produit
  * Montant brut, net, commission
  * Type de licence
  * Date / heure
* Stocké dans `contracts/{tx_id}.pdf` sur R2
* URL ajoutée dans `transactions.contract_url`

---

### � 3.6 DOWNLOAD FLOW (Beats & Kits uniquement)

1. App → `/api/generate-download` (tx_id)
2. Backend vérifie :

   * Transaction "paid"
   * Buyer_id correspond
3. Retourne `presigned GET` R2 (15 min TTL)
4. App lance le téléchargement.
5. Backend logge dans `download_logs`.

---

### � 3.6bis MESSAGING FLOW (Services uniquement)

1. **Activation** : Chat activé uniquement après confirmation de réservation.
2. **Participants** : Client + Prestataire uniquement.
3. **Fonctionnalités** :

   * Échange de messages texte
   * Partage coordonnées (téléphone, adresse)
   * Négociation prix (services "à la demande")
   * Coordination logistique
4. **Restrictions** :

   * Pas de partage de fichiers audio
   * Pas de liens externes vers autres plateformes
   * Modération automatique des messages
5. **Fin** : Chat fermé après `status = completed`.

---

### 3.6ter FAVORITES FLOW (Système de Likes)

1. **Toggle Favorite** : User clique HeartIcon sur Product Card ou Mini Player.
2. **Interface Optimiste** : HeartIcon change immédiatement (outline → filled).
3. **Synchronisation** : App → `/api/favorites` → DB update.
4. **Rollback** : Si erreur → retour à l'état précédent + toast.
5. **Écran Favoris** : Grid 2 colonnes avec tous les beats likés.
6. **Synchronisation Temps Réel** : WebSocket pour updates multi-device.

---

### 3.6quater PLAYLISTS FLOW (Éditoriales)

#### 3.6quater.1 Admin Flow (Création Playlists)

1. **Dashboard Admin** : Gestion des playlists éditoriales.
2. **Création Playlist** : Titre, description, typebeat, ambiance, BPM.
3. **Ajout Beats** : Sélection beats selon critères (genre, BPM, tendances).
4. **Ordre** : Définir l'ordre des beats dans la playlist.
5. **Publication** : Playlist visible pour tous les users.

#### 3.6quater.2 User Flow (Consommation Playlists)

1. **Découverte** : Playlists sur Home Screen et Marketplace.
2. **Lecture** : Tap sur playlist → PlaylistDetailScreen.
3. **Player Intégré** : Lecture continue automatique des beats.
4. **Contrôles** : Play/Pause, Next/Previous, Shuffle, Repeat.
5. **Favoris** : HeartIcon pour liker beats depuis playlist.
6. **Achat** : Bouton "Acheter" pour beats non possédés.

---

## � 4. CREATOR FLOW (VENDEUR / PRODUCTEUR)

### � 4.1 ACTIVER MODE VENDEUR

* Onglet “Publier” → bouton “Activer la vente”
* Demande : genre musical, exemple de prod, compte Wave pour paiements
* Si validé par admin → set `can_sell = true` et `can_withdraw = true`

---

### � 4.2 UPLOAD PRODUIT

1. Onglet "Publier"
2. Choix type : Beat / Kit / Sample / Service
3. Formulaire :

   * Titre
   * Description
   * Prix (beats/kits) ou Tarification (services)
   * Licence (beats/kits uniquement)
   * Tags / BPM / Genre
   * Upload Preview (30 s max, mp3)
   * Upload fichier complet (beats/kits) ou Portfolio (services)
4. Soumission → `status = pending`
5. Admin valide → `status = active` (visible marketplace)

---

### � 4.2bis CONFIGURATION SERVICES

1. **Type de tarification** :

   * Prix fixe : montant unique
   * À la demande : "Contactez-moi"
   * Multi-tarifs : plusieurs options
2. **Disponibilités** :

   * Calendrier des créneaux
   * Zones géographiques
   * Types de prestations
3. **Portfolio** :

   * Exemples de travaux
   * Témoignages clients
   * Certifications

---

### � 4.3 DASHBOARD CRÉATEUR

* Onglet "Mes ventes" :

  * Liste des produits (beats/kits)
  * Ventes totales
  * Revenus (wallet)
  * Historique téléchargements
* Onglet "Mes services" :

  * Réservations reçues
  * Calendrier disponibilités
  * Historique prestations
  * Avis clients
* Onglet "Statistiques" (V2) :

  * Vues, ventes, notes
* Onglet "Retraits" :

  * Solde dispo (beats/kits uniquement)
  * Formulaire demande de retrait (Wave/OM)
  * Validation manuelle admin

---

## � 5. SERVICES FLOW (INGÉ SON / STUDIO) - GRATUIT

### � 5.1 PUBLICATION SERVICE

* Type = `service`
* Champs : nom, tarification flexible, description, portfolio
* **Aucune commission** → service gratuit pour la plateforme
* Validé par admin → visible dans catégorie "Services"

### � 5.2 RÉSERVATION SERVICE

* Le client fait une demande → `booking` créé
* Statut = `pending` → `confirmed` → `completed`
* **Paiement externe** : cash, Wave direct, Orange Money direct
* Chat activé pour coordination
* Avis possible après prestation

---

## � 6. BOOSTS FLOW

### � 6.1 TYPES DE BOOST

| Type    | Durée    | Tarif estimé |
| :------ | :------- | :----------- |
| Produit | 7 jours  | 2 000 F      |
| Profil  | 14 jours | 5 000 F      |

### � 6.2 PROCESSUS BOOST

1. User clique "Booster ce beat / kit / service / profil"
2. Paiement via `/api/pay-boost`
3. Transaction `type = boost` (commission = 0)
4. Création entrée dans `boosts`
5. Si `active` → élément affiché en haut des listes

---

## � 7. TRANSACTIONS & WALLET FLOW

| Action         | Effet                                         |
| :------------- | :-------------------------------------------- |
| Achat beat/kit | Crée transaction sale, calcule 5 % commission |
| Réservation service | Crée booking, aucun paiement plateforme    |
| Paiement boost | Crée transaction boost, 0 % commission        |
| Téléchargement | Génère URL expirable, log                     |
| Retrait        | Décrémente wallet, crée trace admin           |

---

## � 8. ADMIN FLOW

### �‍� Dashboard

* Voir produits “pending”
* Voir signalements
* Voir transactions / revenus
* Gérer boosts et paiements

### � Actions

* `validate_product(id)`
* `toggle_capability(user_id, key, value)`
* `mark_withdrawal_paid(id)`
* `moderate_service(id)` (nouveau)
* `resolve_booking_dispute(id)` (nouveau)

---

## � 9. SECURITY FLOW

* Supabase policies vérifient capabilities pour :

  * upload, vente, achat, retrait
* JWT enrichi de `capabilities`
* Cloudflare R2 = privé par défaut
* Presigned URLs TTL courts (5–15 min)
* Logs download pour audit

---

## � 10. BACKEND ENDPOINTS (vues générales)

| Route                         | Description           | Capability     |
| :---------------------------- | :-------------------- | :------------- |
| `POST /api/upload-request`    | Génère URL PUT R2     | `can_sell`     |
| `POST /api/upload-complete`   | Crée produit pending  | `can_sell`     |
| `GET /api/products`           | Liste produits actifs | -              |
| `POST /api/pay`               | Paiement Wave/OM (beats/kits) | `can_buy`      |
| `POST /api/generate-download` | Donne URL GET R2      | `can_buy`      |
| `POST /api/boost`             | Paiement boost        | `can_buy`      |
| `GET /api/wallet`             | Voir solde            | `can_withdraw` |
| `POST /api/withdraw`          | Demande retrait       | `can_withdraw` |
| `POST /api/bookings/create`  | Crée réservation service | -              |
| `GET /api/bookings`          | Liste réservations    | -              |
| `POST /api/conversations/create` | Crée chat service | -              |
| `POST /api/favorites`             | Toggle favorite beat   | -              |
| `GET /api/favorites`              | Liste favoris user    | -              |
| `GET /api/playlists`              | Liste playlists publiques | -          |
| `GET /api/playlists/:id`          | Détail playlist + beats | -           |
| `POST /api/admin/playlists`        | Créer playlist (admin) | `admin`        |
| `PUT /api/admin/playlists/:id`     | Modifier playlist (admin) | `admin`    |
| `POST /api/admin/playlists/:id/items` | Ajouter beat à playlist (admin) | `admin` |

---

## � 11. EVENT LOGS

| Événement        | Table           |
| :--------------- | :-------------- |
| Téléchargement   | `download_logs` |
| Paiement validé  | `transactions`  |
| Boost actif      | `boosts`        |
| Retrait effectué | `withdrawals`   |
| Réservation créée | `bookings`     |
| Message envoyé   | `messages`      |
| Favorite ajouté  | `favorites`    |
| Playlist créée   | `playlists`    |
| Beat ajouté à playlist | `playlist_items` |

---

## � 12. FUTURE FLOWS (V2+)

* **Services gratuits + réservation** (Phase 1) ✅
* **Messagerie conditionnelle** (services uniquement) ✅
* **Système de favoris** (Phase 1) ✅
* **Playlists éditoriales** (Phase 1) ✅
* **AI tagging automatique** (genre, BPM)
* **Subscriptions (Pro)** → Boosts inclus
* **SODAV integration** → Déclaration automatique œuvres
* **Chat intégré** (artiste ↔ producteur) - **RESTREINT aux services**

---

## ✅ 13. MVP COMPLETION CRITERIA

| Module   | Doit permettre                   |
| :------- | :------------------------------- |
| Auth     | Connexion OTP fonctionnelle      |
| Upload   | Preview + full file sur R2       |
| Vente    | Paiement + commission 5 % (beats/kits) |
| Services | Réservation gratuite + chat      |
| Download | URL expirable, contrat PDF       |
| Boost    | Paiement + affichage prioritaire |
| Admin    | Validation produits + retraits + services |

---

## 📝 Changelog

* **v2.2** - Ajout du système de favoris et playlists éditoriales
* **v2.1** - Ajout du modèle services gratuits avec réservation et messagerie conditionnelle
* **v1.0** - Version initiale du document de flux
