# Linkart — Backend Structure Document

> Version: v3.1
> Architecture séparée : Products (beats/kits payants) + Services (professionnels gratuits)
> Multi-pricing : Licences pour products, Tiers pour services
> Design System v2.0 : Système de favoris et playlists éditoriales

Ce document décrit l'**architecture backend**, les **tables**, les **endpoints**, les **politiques de sécurité**, les **processus asynchrones** et les **ops** nécessaires pour implémenter Linkart (MVP → scale). Il sert de référentiel pour les devs backend, les fonctions Edge et Cursor AI.

---

## 1. Principes généraux

* **Serverless-first** : privilégier Supabase Edge Functions / Vercel Lambdas pour logique métier (stateless).
* **DB-centric** : Supabase Postgres est la source de vérité (RLS + migrations).
* **Storage** : Cloudflare R2 ; accès via presigned PUT/GET uniquement.
* **Secrets** : stocker uniquement dans vault / env variables (Vercel / Supabase secrets).
* **Observabilité** : logs applicatifs + Sentry + métriques basiques (errors, tx/s, download/s).
* **Security by design** : presigned URLs, TTL courts, capability-based access control, RLS.
* **Séparation claire** : Products (beats/kits payants) vs Services (professionnels gratuits).
* **Multi-pricing** : Tables dédiées pour licences (products) et tiers (services).

---

## 2. Environnements & infra

* **envs** : dev / staging / prod
* **services** :

  * Supabase (Auth, Postgres, Edge Functions)
  * Cloudflare R2 (storage)
  * Vercel (web, optional Edge funcs)
  * Sentry (error tracking)
  * Github Actions (CI)
* **secrets to set** (exemples):

  * `R2_ACCESS_KEY_ID`, `R2_SECRET_ACCESS_KEY`, `R2_BUCKET`
  * `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`
  * `PAYMENT_WAVE_CLIENT_ID`, `PAYMENT_WAVE_SECRET` (or OM provider)
  * `JWT_SECRET_DOWNLOAD` (if using signed tokens separate from JWT)

---

## 3. Database schema (core tables)

> Utiliser migrations SQL (eg. `pg-migrate`, `sqitch`, `supabase migration`) — garder versions et rollback.

### 3.1 `users`

* `id uuid primary key` (auth uid)
* `phone text`
* `email text`
* `name text`
* `bio text`
* `location text`
* `capabilities jsonb` -- default `{"can_buy":true,"can_sell":false,"can_offer_services":false,"can_withdraw":false}`
* `wallet_balance numeric default 0` -- en centimes/FCFA units (beats/kits uniquement)
* `verified boolean default false`
* `created_at timestamptz default now()`

### 3.2 `products` (beats/kits/samples payants)

* `id uuid pk`
* `user_id uuid references users(id)`
* `title text`
* `description text`
* `type text` CHECK (beat|kit|sample)
* `preview_key text` (R2 object key)
* `file_key text` (R2 object key)
* `status text` CHECK (draft|pending|active|rejected)
* `metadata jsonb` (bpm, genre, duration, tags)
* `created_at timestamptz default now()`

### 3.3 `product_pricing` (multi-licences pour products)

* `id uuid pk`
* `product_id uuid references products(id)`
* `license_type text` CHECK (basic|non_exclusive|exclusive|lease)
* `price numeric` -- currency smallest unit
* `terms text` -- description des termes de la licence
* `is_available boolean default true`
* `display_order int default 0`
* `created_at timestamptz default now()`

### 3.4 `services` (professionnels gratuits)

* `id uuid pk`
* `provider_id uuid references users(id)`
* `title text`
* `description text`
* `category text` CHECK (mixing|mastering|recording|production|coaching|sound_design)
* `portfolio_keys text[]` -- array de clés R2 pour portfolio
* `status text` CHECK (draft|pending|active|rejected)
* `metadata jsonb` (experience, certifications, equipment)
* `created_at timestamptz default now()`

### 3.5 `service_pricing` (multi-tiers pour services)

* `id uuid pk`
* `service_id uuid references services(id)`
* `tier_name text` -- ex: "Basic", "Standard", "Premium"
* `price numeric` -- nullable si is_on_demand = true
* `description text` -- description du tier
* `duration_estimate text` -- ex: "2 heures", "1 jour"
* `is_on_demand boolean default false` -- prix négocié via chat
* `display_order int default 0`
* `created_at timestamptz default now()`

### 3.6 `bookings` (réservations services)

* `id uuid pk`
* `service_id uuid references services(id)`
* `pricing_tier_id uuid references service_pricing(id)` -- nullable si on-demand
* `client_id uuid references users(id)`
* `provider_id uuid references users(id)`
* `status text` CHECK (pending|confirmed|in_progress|completed|cancelled)
* `scheduled_at timestamptz`
* `completed_at timestamptz` nullable
* `negotiated_price numeric` nullable -- prix final négocié pour on-demand
* `notes text` nullable
* `created_at timestamptz default now()`

### 3.7 `conversations` (messagerie services uniquement)

* `id uuid pk`
* `booking_id uuid references bookings(id)`
* `status text` CHECK (active|closed) default 'active'
* `created_at timestamptz default now()`

### 3.8 `messages` (messages dans conversations)

* `id uuid pk`
* `conversation_id uuid references conversations(id)`
* `sender_id uuid references users(id)`
* `content text`
* `is_read boolean default false`
* `created_at timestamptz default now()`

### 3.9 `transactions` (beats/kits uniquement)

* `id uuid pk`
* `buyer_id uuid references users(id)`
* `seller_id uuid references users(id)`
* `product_id uuid references products(id)` -- UNIQUEMENT products, jamais services
* `pricing_id uuid references product_pricing(id)` -- licence sélectionnée
* `type text` CHECK (sale|boost|withdrawal|refund)
* `gross_amount numeric`
* `commission_amount numeric` -- 5% de gross_amount
* `net_amount numeric` -- gross_amount - commission_amount
* `status text` CHECK (pending|paid_held|released|failed|refunded|disputed)
* `contract_url text` (R2 key)
* `provider_payload jsonb` (raw callback from Wave/OM)
* `created_at timestamptz default now()`

### 3.10 `boosts`

* `id uuid pk`
* `user_id uuid` who bought the boost
* `target_type text` (product|service|profile)
* `target_id uuid` nullable
* `start_at timestamptz`
* `end_at timestamptz`
* `amount_paid numeric`
* `status text` (active|expired|cancelled)
* `created_at timestamptz default now()`

### 3.11 `download_tokens` (beats/kits uniquement)

* `token text pk` (random or jwt)
* `tx_id uuid references transactions(id)`
* `user_id uuid` buyer
* `file_key text`
* `expires_at timestamptz`
* `max_downloads int default 3`
* `downloads int default 0`
* `revoked boolean default false`
* `created_at timestamptz default now()`

### 3.12 `download_logs`

* `id serial pk`
* `token text` nullable
* `tx_id uuid` nullable
* `user_id uuid` nullable
* `file_key text`
* `ip text`
* `ua text`
* `created_at timestamptz default now()`

### 3.13 `withdrawals` (beats/kits uniquement)

* `id uuid pk`
* `user_id uuid`
* `amount numeric`
* `status text` (pending|paid|rejected)
* `provider_ref text` (Wave transfer id)
* `created_at timestamptz default now()`

### 3.14 `platform_earnings`

* `id serial pk`
* `tx_id uuid references transactions(id)`
* `type text` (commission|boost)
* `amount numeric`
* `created_at timestamptz default now()`

### 3.15 `ratings` (produits ET services)

* `id serial pk`
* `user_id uuid references users(id)` -- author of the rating
* `product_id uuid references products(id)` nullable
* `booking_id uuid references bookings(id)` nullable
* `score int` CHECK (score >=1 AND score <=5)
* `comment text` nullable
* `status text` CHECK (visible|hidden|flagged) DEFAULT 'visible'
* `created_at timestamptz default now()`
* CONSTRAINT `ratings_product_or_booking` CHECK (
  (product_id IS NOT NULL AND booking_id IS NULL) OR 
  (product_id IS NULL AND booking_id IS NOT NULL)
)

### 3.16 `favorites` (système de favoris)

* `id uuid pk`
* `user_id uuid references users(id)`
* `product_id uuid references products(id)` -- UNIQUEMENT products, jamais services
* `created_at timestamptz default now()`
* UNIQUE(user_id, product_id) -- un user ne peut liker qu'une fois le même produit

### 3.17 `playlists` (playlists éditoriales admin)

* `id uuid pk`
* `title text not null`
* `description text`
* `typebeat text` -- ex: "Trap", "Drill", "Afrobeat"
* `ambiance text` -- ex: "Sombre", "Énergique", "Chill"
* `bpm_range text` -- ex: "140-160"
* `cover_image_key text` -- clé R2 pour image de couverture
* `created_by uuid references users(id)` -- DOIT être admin
* `is_published boolean default false`
* `display_order int default 0`
* `created_at timestamptz default now()`
* `updated_at timestamptz default now()`

### 3.18 `playlist_items` (beats dans playlists)

* `id uuid pk`
* `playlist_id uuid references playlists(id) on delete cascade`
* `product_id uuid references products(id) on delete cascade`
* `display_order int default 0` -- ordre dans la playlist
* `added_at timestamptz default now()`
* UNIQUE(playlist_id, product_id) -- un beat ne peut être qu'une fois dans une playlist

### 3.19 Indexes

* `products(status)`, `products(user_id)`, `product_pricing(product_id)`
* `services(status)`, `services(provider_id)`, `service_pricing(service_id)`
* `bookings(service_id, status)`, `bookings(client_id)`, `bookings(provider_id)`
* `conversations(booking_id)`, `messages(conversation_id)`
* `transactions(status)`, `transactions(product_id)`, `transactions(pricing_id)`
* `download_tokens(expires_at)`, `users(phone)`
* `ratings(product_id)`, `ratings(booking_id)`
* `favorites(user_id)`, `favorites(product_id)`
* `playlists(created_by)`, `playlists(is_published)`, `playlists(display_order)`
* `playlist_items(playlist_id)`, `playlist_items(product_id)`

---

## 4. Row-Level Security (RLS) & Policies

* **General**: Enable RLS on critical tables and create policies using `auth.uid()` and capabilities stored in JWT/DB.
* **Example policies**:

  * `products`: insert allowed only if `auth.uid() = new.user_id` and `auth.jwt() -> 'capabilities' ->> 'can_sell' = 'true'`.
  * `transactions`: insert only via server role (service key) or via Edge Function after auth.
  * `download_tokens`/`download_logs`: token creation only from server; token consumption validated via Edge Function or Worker.

---

## 5. Core endpoints & behavior

> All endpoints require JWT auth where applicable; server-only operations must use service role key.

### 5.1 Auth-related

* `POST /auth/signup` — handled by Supabase Auth (OTP).
* `POST /auth/profile-update` — update profile fields.

### 5.2 Product lifecycle (beats/kits)

* `POST /api/upload-request`

  * Input: `{ filename, size, contentType, preview:boolean }`
  * Check: user has `can_sell`
  * Action: generate presigned PUT for preview/file (R2 key convention) TTL 5min
  * Return: `{ uploadUrl, key }`

* `POST /api/upload-complete`

  * Input: `{ key, metadata }`
  * Action: verify object exists (HEAD), create `products` row `status=pending`
  * Notify admin (email/webhook)

* `GET /api/products`

  * Public: paginated list; boosted items first; filters (genre, licence, bpm, price)

* `GET /api/products/:id`

  * Returns product info, preview GET presigned URL (short TTL) for playback

* `GET /api/products/:id/pricing`

  * Returns all available licenses for the product
  * Response: `{ product_id, pricing_options: [{ id, license_type, price, terms }] }`

### 5.3 Service lifecycle (professionnels)

* `POST /api/services/create`

  * Input: `{ title, description, category, portfolio_keys, pricing_tiers }`
  * Check: user has `can_offer_services`
  * Action: create `services` row `status=pending` + `service_pricing` rows

* `GET /api/services`

  * Public: paginated list; filters (category, location, price_range)

* `GET /api/services/:id`

  * Returns service info, portfolio presigned URLs

* `GET /api/services/:id/pricing`

  * Returns all available tiers for the service
  * Response: `{ service_id, pricing_options: [{ id, tier_name, price, description, is_on_demand }] }`

### 5.4 Purchase & payment (beats/kits uniquement)

* `POST /api/pay`

  * Input: `{ product_id, pricing_id, payment_method }`
  * Action: validate pricing_id belongs to product_id, create `transactions` row `status=pending`
  * Return: payment instructions (deeplink or API response)

* `POST /api/payment-callback` (webhook from provider) — **server-only**

  * Validate signature
  * Update `transactions.status = paid_held`
  * Calculate commission = gross * 0.05, net = gross - commission
  * Create `platform_earnings` row
  * Generate contract PDF and store in R2; update `transactions.contract_url`
  * Generate presigned GET for buyer (or create `download_token`)
  * Notify buyer & seller

* `POST /api/transactions/:id/release` (admin ou auto)

  * Update `transactions.status = released`
  * Update seller `wallet_balance += net`

### 5.5 Booking & messaging (services uniquement)

* `POST /api/bookings/create`

  * Input: `{ service_id, pricing_tier_id?, scheduled_at, notes? }`
  * Action: create `bookings` row `status=pending`
  * Notify provider

* `POST /api/bookings/:id/confirm`

  * Input: `{ confirmed: boolean, negotiated_price? }`
  * Action: update `bookings.status = confirmed`, create `conversations` row
  * Return: conversation_id for messaging

* `POST /api/bookings/:id/complete`

  * Input: `{ notes? }`
  * Action: update `bookings.status = completed`, close `conversations.status = closed`

* `POST /api/conversations/:id/messages`

  * Input: `{ content }`
  * Check: user is participant in conversation
  * Action: create `messages` row

* `GET /api/conversations/:id/messages`

  * Returns paginated messages for the conversation

### 5.6 Favorites & Playlists (Design System v2.0)

* `POST /api/favorites`

  * Input: `{ product_id }`
  * Action: toggle favorite (insert if not exists, delete if exists)
  * Return: `{ is_favorite: boolean }`

* `GET /api/favorites`

  * Returns paginated list of user's favorite products
  * Include product details and pricing

* `GET /api/playlists`

  * Returns published playlists (admin-created)
  * Include playlist metadata and beat count

* `GET /api/playlists/:id`

  * Returns playlist details with ordered beats
  * Include product details and pricing for each beat

* `POST /api/admin/playlists` (admin only)

  * Input: `{ title, description, typebeat, ambiance, bpm_range, cover_image_key? }`
  * Action: create playlist `is_published=false`

* `PUT /api/admin/playlists/:id` (admin only)

  * Input: playlist metadata updates
  * Action: update playlist, set `updated_at`

* `POST /api/admin/playlists/:id/items` (admin only)

  * Input: `{ product_id, display_order? }`
  * Action: add beat to playlist

* `DELETE /api/admin/playlists/:id/items/:item_id` (admin only)

  * Action: remove beat from playlist

### 5.7 Download management (beats/kits uniquement)

* `POST /api/generate-download`

  * Input: `{ tx_id }`
  * Check: `transactions.status = paid_held|released` and caller is buyer
  * Action: generate presigned GET R2 (TTL 15m) or create `download_token`
  * Log in `download_logs` upon consumption

### 5.7 Boosts

* `POST /api/boost`

  * Input: `{ target_type, target_id, duration, amount }`
  * Creates `transactions` type=boost `status=pending`
  * On `payment-callback`, create `boosts` row with `start_at` and `end_at`
  * No commission taken (platform keeps full amount)

### 5.8 Wallet & Withdrawals (beats/kits uniquement)

* `GET /api/wallet`

  * Return wallet balance & pending withdrawals

* `POST /api/withdraw`

  * Input: `{ amount, provider_account }`
  * Create `withdrawals` row `status=pending` and notify admin

* `POST /api/withdraw/confirm` (admin)

  * Process transfer via Wave/OM, mark `withdrawals.status=paid`, deduct user wallet

### 5.9 Ratings (produits ET services)

* `POST /api/ratings`

  * Input: `{ product_id?, booking_id?, score, comment? }`
  * Check: user purchased product OR completed booking
  * Action: create `ratings` row

### 5.10 Admin endpoints

* `GET /api/admin/products/pending`
* `POST /api/admin/products/:id/approve`
* `POST /api/admin/products/:id/reject`
* `GET /api/admin/services/pending`
* `POST /api/admin/services/:id/approve`
* `POST /api/admin/services/:id/reject`
* `POST /api/admin/users/:id/toggle-capability`
* `GET /api/admin/transactions`
* `POST /api/admin/withdrawals/:id/mark-paid`
* `GET /api/admin/bookings`
* `POST /api/admin/bookings/:id/resolve-dispute`

---

## 6. Background jobs & cron

* **Daily job**: expire boosts (set status expired where end_at < now).
* **Nightly backup job**: snapshot critical tables + list new objects to archive to cold storage.
* **Periodic reclaim job**: check products/services referencing missing R2 keys; notify sellers.
* **Billing reconciliation**: daily/weekly reconcile `platform_earnings` vs provider payouts.
* **Auto-release transactions**: release held transactions after X days (configurable).
* **Cleanup expired conversations**: close conversations for completed bookings older than 30 days.

---

## 7. File naming conventions & bucket structure

* `previews/{userId}/{productId}_{uuid}_preview.mp3`
* `beats/{userId}/{productId}_{uuid}.zip or .mp3`
* `contracts/{txId}.pdf`
* `avatars/{userId}.jpg`
* `portfolio/{userId}/{serviceId}_{uuid}.mp3` (services)

Naming must include `userId` + `productId/serviceId` + timestamp/uuid to avoid collisions.

---

## 8. Security & anti-abuse

* Rate-limit presigned URL generation: max 5/min per user.
* Max file size limits enforced at upload (client + server HEAD verification).
* Previews limited to 30s / 5MB.
* Monitor unusual download volumes per token -> auto-revoke token and flag account.
* Admin action for disputes: freeze tx, revoke presigned URLs, suspend seller.
* Messaging rate limits: max 50 messages/hour per conversation.
* Booking spam protection: max 3 pending bookings per service per user.

---

## 9. Testing strategy

* Unit tests for Edge Functions (jest).
* Integration tests for payment flows (mock provider).
* End-to-end tests for upload → admin approve → purchase → download (beats/kits).
* End-to-end tests for service booking → messaging → completion (services).
* End-to-end tests for favorites system (toggle, sync, rollback).
* End-to-end tests for playlists (admin creation, user consumption, player integration).
* Load test core endpoints (GET products/services, generate-download) with k6.
* Multi-pricing tests: different licenses, different tiers.

---

## 10. Observability & SLAs

* Sentry for errors; alert on >5 errors/min.
* DB slow queries monitoring; index tuning.
* Uptime target for Edge functions: 99.9%.
* Retain logs 90 days for audit.
* Monitor booking completion rates, messaging activity.

---

## 11. Migration & future-proofing

* Keep `capabilities` JSONB to add flags without migrations.
* Use feature flags for toggling heavy features (booking, wallet auto).
* Plan migration from R2 → S3 if needed by writing abstracted storage layer.
* Multi-pricing schema allows adding new license types or tier structures.

---

## 12. SODAV integration (future)

* Design hook points to export transactions & product metadata in the format SODAV needs (CSV or API).
* Add `is_registered_with_sodav boolean` on `products` or `users`.
* Implement scheduled export job once partnership established.
* Services are not exported to SODAV (no transactions).

---

## 13. Checklist before production

* [ ] RLS policies implemented + tested for all new tables
* [ ] Payment provider integration tested + webhooks secured
* [ ] R2 keys rotated & env stored securely
* [ ] Monitoring & alerts configured (Sentry + logs)
* [ ] Backups automated
* [ ] Admin panel basic flows implemented (products + services)
* [ ] Multi-pricing UI implemented and tested
* [ ] Booking system tested end-to-end
* [ ] Messaging system tested with rate limits
* [ ] Favorites system tested (toggle, sync, rollback)
* [ ] Playlists system tested (admin CRUD, user consumption)
* [ ] Design System v2.0 components implemented
* [ ] Legal: CGU / seller attestation clause

---

## 📝 Changelog

* **v3.1** - Ajout du système de favoris et playlists éditoriales (Design System v2.0)
* **v3.0** - Architecture séparée Products/Services avec multi-pricing
* **v2.0** - Version initiale avec services gratuits et réservations
