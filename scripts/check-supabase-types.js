#!/usr/bin/env node

/**
 * Script pour v√©rifier et mettre √† jour les types Supabase
 * V√©rifie si les types sont √† jour avec la base de donn√©es
 */

const { execSync } = require('child_process');
const fs = require('fs');

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkSupabaseTypes() {
  try {
    log('\nüîç V√©rification des types Supabase...', 'blue');

    const typesFile = 'src/types/supabase.ts';

    // V√©rifier que le fichier existe
    if (!fs.existsSync(typesFile)) {
      log('‚ùå Fichier types/supabase.ts manquant', 'red');
      log('G√©n√©ration des types...', 'blue');
      execSync('npm run supabase:types', { stdio: 'inherit' });
      log('‚úÖ Types g√©n√©r√©s avec succ√®s', 'green');
      return true;
    }

    // V√©rifier que le fichier n'est pas vide et contient des types valides
    const content = fs.readFileSync(typesFile, 'utf8');
    const isEmpty = content.trim().length === 0;
    const isInvalid = !content.includes('export type Database') && !content.includes('export interface Database');

    if (isEmpty || isInvalid) {
      const reason = isEmpty ? 'vide' : 'invalide';
      log(`‚ö†Ô∏è  Fichier types/supabase.ts ${reason}, r√©g√©n√©ration...`, 'yellow');
      execSync('npm run supabase:types', { stdio: 'inherit' });

      // V√©rifier apr√®s r√©g√©n√©ration
      const newContent = fs.readFileSync(typesFile, 'utf8');
      if (
        newContent.trim().length > 0 &&
        (newContent.includes('export type Database') || newContent.includes('export interface Database'))
      ) {
        log('‚úÖ Types g√©n√©r√©s avec succ√®s', 'green');
        return true;
      } else {
        log('‚ùå Impossible de g√©n√©rer des types valides', 'red');
        return false;
      }
    }

    log('‚úÖ Types Supabase valides', 'green');

    // V√©rifier si les types sont √† jour (optionnel - peut √™tre co√ªteux)
    try {
      log('üîÑ V√©rification de la synchronisation des types...', 'blue');

      // Sauvegarder le fichier actuel
      const currentContent = fs.readFileSync(typesFile, 'utf8');

      // G√©n√©rer de nouveaux types temporairement
      const tempFile = 'src/types/supabase.temp.ts';
      // Utiliser directement la commande supabase sans passer par npm
      execSync(`npx supabase gen types typescript --project-id tevnkidggpvqpislmhht > ${tempFile}`, { stdio: 'pipe' });

      if (fs.existsSync(tempFile)) {
        const newContent = fs.readFileSync(tempFile, 'utf8');

        // Comparer les contenus
        if (currentContent !== newContent) {
          log('‚ö†Ô∏è  Types Supabase non synchronis√©s', 'yellow');
          log('Mise √† jour des types...', 'blue');
          fs.copyFileSync(tempFile, typesFile);
          log('‚úÖ Types mis √† jour avec succ√®s', 'green');
        } else {
          log('‚úÖ Types Supabase synchronis√©s', 'green');
        }

        // Nettoyer le fichier temporaire
        fs.unlinkSync(tempFile);
      }
    } catch (_error) {
      log('‚ö†Ô∏è  Impossible de v√©rifier la synchronisation (normal en local)', 'yellow');
      log('‚úÖ Types Supabase OK', 'green');
    }

    return true;
  } catch (_error) {
    log('‚ùå Erreur lors de la v√©rification des types Supabase', 'red');
    log(`D√©tails: ${_error.message}`, 'red');
    return false;
  }
}

function main() {
  log('üöÄ V√©rification des types Supabase...', 'blue');

  if (checkSupabaseTypes()) {
    log('\nüéâ V√©rification des types Supabase termin√©e !', 'green');
    process.exit(0);
  } else {
    log('\nüí• Erreur lors de la v√©rification des types', 'red');
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { checkSupabaseTypes };
